{"version":3,"sources":["test/test.js"],"names":[],"mappings":"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","file":"test/test.js","sourcesContent":["import assert from 'assert';\nimport testSuite from 'json-schema-test-suite';\nimport * as _ from 'lodash';\nimport { isEqual, stringify } from './helpers';\nimport * as json from '../lib';\nimport { mkdirSync } from 'fs';\nimport { join } from 'path';\nimport del from 'del';\n\nconst draft4 = testSuite.draft4();\n\nconst verbose = false;\n\nfunction print() {\n  if (verbose) {\n    if (typeof arguments[0] == 'object') {\n      console.log(JSON.stringify(arguments[0], null, 2));\n    } else {\n      console.log(...arguments);\n    }\n  }\n}\n\nfunction getTestSection(name, description) {\n  const group = _.findWhere(draft4, { name: name });\n  if (!group) throw new Error(\"can't find schema for: \" + name);\n  const section = _.findWhere(group.schemas, { description: description });\n  if (!section) throw new Error(\"can't find section for: \" + name + ' => ' + description);\n  return section;\n}\n\nfunction getSchema(name, description) {\n  return getTestSection(name, description).schema;\n}\n\nfunction test(name, description, builderFn) {\n  it(name + ': ' + description, function () {\n    try {\n      const expected = getSchema(name, description);\n      const actual = builderFn().json();\n\n      \n      if (!isEqual(actual, expected) || verbose) {\n        print('==============================');\n        print('expected =>');\n        print(expected);\n        print('------------------------------');\n        print('actual =>');\n        print(actual);\n      }\n\n      assert(isEqual(actual, expected));\n    } catch (err) {\n      print('==============================');\n      print('Uncaught error for: %s => %s', name, description);\n      throw err;\n    }\n  });\n}\n\ntest.skip = function () {\n  it.skip(arguments[0] + ' => ' + arguments[1], function () {});\n}\n\ndescribe ('Tests based on standard JSON Schema Test Suite', () => {\n\n  describe('generic keywords (any instance type)', () => {\n\n    describe('enum', () => {\n\n      test('enum', 'simple enum validation', () => {\n        const schema = json.enum([1, 2, 3]);\n        assert(schema.enum, [1, 2, 3]);\n        return schema;\n      });\n\n      // equivalent\n      test('enum', 'simple enum validation', () => {\n        const schema = json.enum(1, 2, 3);\n        assert(schema.enum, [1, 2, 3]);\n        return schema;\n      });\n\n      test('enum', 'heterogeneous enum validation', () => {\n        const schema = json.enum([6, \"foo\", [], true, { \"foo\": 12 }]);\n        assert(schema.enum, [6, \"foo\", [], true, { \"foo\": 12 }]);\n        return schema;\n      });\n\n      test('enum', 'enums in properties', () => {\n        const schema = json\n            .type('object')\n            .required(['bar'])\n            .properties({\n              foo: json.enum('foo'),\n              bar: json.enum('bar')\n            });\n\n        return schema;\n      });\n\n      // equivalent (adding properties constructed with name and value)\n      test('enum', 'enums in properties', () => {\n        const schema = json\n            .object()\n            .property('foo', json.enum('foo'))\n            .property('bar', json.enum('bar'), true);\n\n        return schema;\n      });\n\n      // equivalent (adding properties constructed with objects)\n      test('enum', 'enums in properties', () => {\n        const schema = json\n            .object()\n            .property({ foo: json.enum('foo') })\n            .property({ bar: json.enum('bar') }, true);\n\n        return schema;\n      });\n    });\n\n    describe('type', () => {\n\n      test('type', 'integer type matches integers', () => {\n        const schema = json.integer();\n        assert.equal(schema.type(), 'integer');\n        return schema;\n      });\n\n      test('type', 'number type matches numbers', () => {\n        const schema = json.number();\n        assert.equal(schema.type(), 'number');\n        return schema;\n      });\n\n      test('type', 'string type matches strings', () => {\n        const schema = json.string();\n        assert.equal(schema.type(), 'string');\n        return schema;\n      });\n\n      test('type', 'object type matches objects', () => {\n        const schema = json.object();\n        assert(schema.type, 'object');\n        return schema;\n      });\n\n      test('type', 'array type matches arrays', () => {\n        const schema = json.array();\n        print(schema);\n        assert(schema.type, 'array');\n        return schema;\n      });\n\n      test('type', 'boolean type matches booleans', () => {\n        const schema = json.boolean();\n        assert(schema.type, 'boolean');\n        return schema;\n      });\n\n      test('type', 'null type matches only the null object', () => {\n        const schema = json.null();\n        assert(schema.type, 'null');\n        return schema;\n      });\n\n      test('type', 'multiple types can be specified in an array', () => {\n        const schema = json.type(['integer', 'string']);\n        return schema;\n      });\n\n    });\n\n    describe('allOf tests', () => {\n\n      test('allOf', 'allOf', () => {\n        const schema = json.allOf([\n          json.property('bar', json.integer(), true),\n          json.property('foo', json.string(), true)]);\n\n        return schema;\n      });\n\n      test('allOf', 'allOf', () => {\n        const schema = json.allOf(\n            json.property('bar', json.integer(), true),\n            json.property('foo', json.string(), true));\n\n        return schema;\n      });\n\n      test('allOf', 'allOf with base schema', () => {\n        const schema = json\n            .allOf([\n              json.property('foo', json.string(), true),\n              json.property('baz', json.null(), true)])\n            .property('bar', json.integer(), true);\n        return schema;\n      });\n\n      test('allOf', 'allOf simple types', () => {\n        const schema = json.allOf([\n          json.maximum(30),\n          json.minimum(20)]);\n\n        return schema;\n      });\n\n    });\n\n    describe('anyOf', () => {\n\n      test('anyOf', 'anyOf', () => {\n        const schema = json.anyOf([json.integer(), json.minimum(2)]);\n        return schema;\n      });\n\n      // equivalent\n      test('anyOf', 'anyOf', () => {\n        const schema = json.anyOf(json.integer(), json.minimum(2));\n        return schema;\n      });\n\n      test('anyOf', 'anyOf with base schema', () => {\n        const schema = json.string().anyOf([json.maxLength(2), json.minLength(4)]);\n        return schema;\n      });\n\n    });\n\n    describe('oneOf', () => {\n\n      test('oneOf', 'oneOf', () => {\n        const schema = json.oneOf([json.integer(), json.minimum(2)]);\n        return schema;\n      });\n\n      // equivalent\n      test('oneOf', 'oneOf', () => {\n        const schema = json.oneOf(json.integer(), json.minimum(2));\n        return schema;\n      });\n\n      test('oneOf', 'oneOf with base schema', () => {\n        const schema = json.string().oneOf(json.minLength(2), json.maxLength(4));\n        return schema;\n      });\n\n    });\n\n    describe('not', () => {\n\n      test('not', 'not', () => {\n        const schema = json.not(json.integer());\n        return schema;\n      });\n\n    });\n\n    describe('type', () => {\n\n      test('not', 'not multiple types', () => {\n        const schema = json.not(json.type('integer', 'boolean'));\n\n        return schema;\n      });\n\n      test('not', 'not more complex schema', () => {\n        const schema = json.not(json.object().property('foo', json.string()));\n        return schema;\n      });\n\n      test('not', 'forbidden property', () => {\n        const schema = json.property('foo', json.not(json.schema()));\n        return schema;\n      });\n\n    });\n\n  });\n\n  describe('object keywords', () => {\n\n    describe('dependencies', () => {\n\n      test('dependencies', 'dependencies', () => {\n        const schema = json.dependencies({ 'bar': ['foo'] });\n        return schema;\n      });\n\n      test('dependencies', 'multiple dependencies', () => {\n        const schema = json.dependencies({ 'quux': ['foo', 'bar'] });\n        return schema;\n      });\n\n      it(\"title does something\", () => {\n        const schema = json.title('bardia');\n        console.log('---------------------------------------');\n        console.log(JSON.stringify(schema, null, 4));\n        return schema;\n      });\n\n\n      test('dependencies', 'multiple dependencies subschema', ()=> {\n        const schema = json.dependencies({\n          bar: json.properties({\n            foo: json.integer(),\n            bar: json.integer()\n          })\n        });\n\n        return schema;\n      });\n\n    });\n\n    describe('properties', () => {\n\n      test('properties', 'object properties validation', () => {\n        const schema = json.properties({\n          foo: json.integer(),\n          bar: json.string()\n        });\n\n        return schema;\n      });\n\n      // equivalent\n      test('properties', 'object properties validation', () => {\n        const schema = json\n            .property('foo', json.integer())\n            .property('bar', json.string());\n\n        return schema;\n      });\n\n      test('properties', 'properties, patternProperties, additionalProperties interaction', () => {\n        const schema = json\n            .property('foo', json.array().maxItems(3))\n            .property('bar', json.array())\n            .patternProperty('f.o', json.minItems(2))\n            .additionalProperties(json.integer());\n\n        return schema;\n      });\n    });\n\n    describe('patternProperties', () => {\n\n      test('patternProperties', 'patternProperties validates properties matching a regex', () => {\n        const schema = json.patternProperties({ 'f.*o': json.integer() });\n        return schema;\n      });\n\n      // equivalent\n      test('patternProperties', 'patternProperties validates properties matching a regex', () => {\n        const schema = json.patternProperty('f.*o', json.integer());\n        return schema;\n      });\n\n      // equivalent\n      test('patternProperties', 'patternProperties validates properties matching a regex', () => {\n        const schema = json.patternProperty({ 'f.*o': json.integer() });\n        return schema;\n      });\n\n      test('patternProperties', 'multiple simultaneous patternProperties are validated', () => {\n        const schema = json\n            .patternProperty('a*', json.integer())\n            .patternProperty('aaa*', json.maximum(20))\n        return schema;\n      });\n\n      test('patternProperties', 'regexes are not anchored by default and are case sensitive', () => {\n        const schema = json\n            .patternProperty('[0-9]{2,}', json.boolean())\n            .patternProperty('X_', json.string());\n\n        return schema;\n      });\n    });\n\n    describe('additionalProperties', () => {\n\n      test('additionalProperties', 'additionalProperties being false does not allow other properties', () => {\n        const schema = json\n            .properties({\n              foo: {},\n              bar: {}\n            })\n            .patternProperties({\n              '^v': {}\n            })\n            .additionalProperties(false);\n\n        return schema;\n      });\n\n      test('additionalProperties', 'additionalProperties allows a schema which should validate', () => {\n        const schema = json\n            .properties({\n              foo: {},\n              bar: {}\n            })\n            .additionalProperties(json.schema().boolean());\n\n        return schema;\n      });\n\n      test('additionalProperties', 'additionalProperties can exist by itself', () => {\n        const schema = json.additionalProperties(json.boolean());\n        return schema;\n      });\n\n      test('additionalProperties', 'additionalProperties are allowed by default', () => {\n        const schema = json\n            .properties({\n              foo: {},\n              bar: {}\n            });\n\n        return schema;\n      });\n\n    });\n\n    test('maxProperties', 'maxProperties validation', () => {\n      const schema = json.maxProperties(2);\n      return schema;\n    });\n\n    test('minProperties', 'minProperties validation', () => {\n      const schema = json.minProperties(1);\n      return schema;\n    });\n\n    test('required', 'required validation', () => {\n      const schema = json\n          .property('foo', {}, true)\n          .property('bar', {});\n      return schema;\n    });\n\n    describe('definitions', () => {\n\n      test('definitions', 'valid definition', () => {\n        const schema = json.$ref('http://json-schema.org/draft-04/schema#');\n        return schema;\n      });\n\n      test('definitions', 'valid definition', () => {\n        const schema = json.$ref('http://json-schema.org/draft-04/schema#');\n        return schema;\n      });\n\n    });\n  });\n\n  describe('numeric keywords', () => {\n\n    describe('multipleOf', () => {\n\n      test('multipleOf', 'by int', () => {\n        const schema = json.multipleOf(2);\n        return schema;\n      });\n\n      test('multipleOf', 'by number', () => {\n        const schema = json.multipleOf(1.5);\n        return schema;\n      });\n\n      test('multipleOf', 'by small number', () => {\n        const schema = json.multipleOf(0.0001);\n        return schema;\n      });\n\n    });\n\n    describe('maximum and exclusiveMaximum', () => {\n\n      test('maximum', 'maximum validation', () => {\n        const schema = json.maximum(3.0);\n        return schema;\n      });\n\n      test('maximum', 'exclusiveMaximum validation', () => {\n        const schema = json.maximum(3.0).exclusiveMaximum(true);\n        return schema;\n      });\n\n    });\n\n    describe('minimum and exclusiveMinimum', () => {\n\n      test('minimum', 'minimum validation', () => {\n        const schema = json.minimum(1.1);\n        return schema;\n      });\n\n      test('minimum', 'exclusiveMinimum validation', () => {\n        const schema = json.minimum(1.1).exclusiveMinimum(true);\n        return schema;\n      });\n\n    });\n\n  });\n\n  describe('array keywords', () => {\n\n    test('items', 'a schema given for items', () => {\n      const schema = json.items(json.schema().integer());\n      return schema;\n    });\n\n    test('items', 'an array of schemas for items', () => {\n      const schema = json.items([json.integer(), json.string()]);\n      return schema;\n    });\n\n    // equivalent\n    test('items', 'an array of schemas for items', () => {\n      const schema = json.items(json.integer(), json.string());\n      return schema;\n    });\n\n    test('additionalItems', 'additionalItems as schema', () => {\n      const schema = json\n          .items([json.schema()])\n          .additionalItems(json.integer());\n\n      return schema;\n    });\n\n    test('additionalItems', 'items is schema, no additionalItems', () => {\n      const schema = json\n          .items(json.schema())\n          .additionalItems(false);\n\n      return schema;\n    });\n\n    test('additionalItems', 'array of items with no additionalItems', () => {\n      const schema = json\n          .items(json.schema(), json.schema(), json.schema())\n          .additionalItems(false);\n\n      return schema;\n    });\n\n    test('additionalItems', 'additionalItems as false without items', () => {\n      const schema = json.additionalItems(false);\n      return schema;\n    });\n\n    test('additionalItems', 'additionalItems are allowed by default', () => {\n      const schema = json.items([json.integer()]);\n      return schema;\n    });\n\n    test('maxItems', 'maxItems validation', () => {\n      const schema = json.maxItems(2);\n      return schema;\n    });\n\n    test('minItems', 'minItems validation', () => {\n      const schema = json.minItems(1);\n      return schema;\n    });\n\n    test('uniqueItems', 'uniqueItems validation', () => {\n      const schema = json.uniqueItems(true);\n      return schema;\n    });\n\n  });\n\n  describe('string keywords', () => {\n\n    test('maxLength', 'maxLength validation', () => {\n      const schema = json.maxLength(2);\n      return schema;\n    });\n\n    test('minLength', 'minLength validation', () => {\n      const schema = json.minLength(2);\n      return schema;\n    });\n\n\n    test('pattern', 'pattern validation', () => {\n      const schema = json.pattern('^a*$');\n      return schema;\n    });\n\n    test('pattern', 'pattern is not anchored', () => {\n      const schema = json.pattern('a+');\n      return schema;\n    });\n\n  });\n\n\tdescribe('optional keywords', () => {\n\t\t\n\t\tdescribe('format', () => {\n\n\t\t\ttest('format', 'validation of date-time strings', () => {\n\t\t\t\tconst schema = json.format('date-time');\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t\ttest('format', 'validation of URIs', () => {\n\t\t\t\tconst schema = json.format('uri');\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t\ttest('format', 'validation of e-mail addresses', () => {\n\t\t\t\tconst schema = json.format('email');\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t\ttest('format', 'validation of IP addresses', () => {\n\t\t\t\tconst schema = json.format('ipv4');\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t\ttest('format', 'validation of IPv6 addresses', () => {\n\t\t\t\tconst schema = json.format('ipv6');\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t\ttest('format', 'validation of host names', () => {\n\t\t\t\tconst schema = json.format('hostname');\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t});\n\n\t\tdescribe('default', () => {\n\n\t\t\ttest('default', 'invalid type for default', () => {\n\t\t\t\tconst schema = json.property('foo', json.integer().default([]) );\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t\ttest('default', 'invalid string value for default', () => {\n\t\t\t\tconst schema = json.property('bar', json.string().minLength(4).default('bad'));\n\t\t\t\treturn schema;\n\t\t\t});\n\n\t\t});\n\n\t});\n\n});\n\ndescribe('Tests', () => {\n\n  const expectedDir = join(__dirname, 'expected');\n  const actualDir = join(__dirname, 'actual');\n\n  function assertMatch(filename) {\n    const expected = require(join(expectedDir, filename));\n    const actual = require(join(actualDir, filename));\n\n    if (verbose && !isEqual(actual, expected) || verbose) {\n      print('\\nFilename: %s', filename);\n      print('Expected:');\n      print(expected);\n      print('Actual:');\n      print(actual);\n    }\n\n    assert(isEqual(actual, expected));\n  }\n\n  function rmdir(dir) {\n    del.sync(dir, { force: true });\n  }\n\n  function test(schema, sample) {\n    schema.save(actualDir, sample);\n    assertMatch(sample);\n  }\n\n  before(() => {\n\n    rmdir(actualDir);\n    mkdirSync(actualDir);\n\n  });\n\n  after(() => {\n    //rmdir(actualDir);\n  });\n\n  describe ('save tests', () => {\n\n    it('should write sample schema async', done => {\n      const schema = json.schema().string();\n      const sample = 'sample1.json';\n\n      schema.save(actualDir, sample, (err) => {\n        if (err) return done(err)\n        assertMatch(sample);\n        done();\n      });\n    });\n\n    it('should write sample schema sync', () => {\n      const schema = json.schema().string();\n      const sample = 'sample1.json';\n      schema.save(actualDir, sample);\n      assertMatch(sample);\n    });\n\n  });\n\n  describe ('Simple tests', () => {\n\n    it('should match empty schema', () => {\n      const schema = json.schema();\n      test(schema, 'empty.json');\n    });\n\n    it('should match schema with property', () => {\n      const schema = json.property('foo');\n      test(schema, 'single-property.json');\n    });\n\n    it('should also match schema with property', () => {\n      const schema = json.schema().properties({ foo: {} });\n      test(schema, 'single-property.json');\n    });\n\n    it('should match object schema with property', () => {\n      const schema = json.object().property('foo');\n      test(schema, 'explicit-object-single-property.json');\n    });\n\n    it('should match schema with additional properties allowed', () => {\n      const schema = json.object().property('foo').additionalProperties(true);\n      test(schema, 'additionalProperties-true.json');\n    });\n\n    it('should match schema with additional properties not allowed', () => {\n      const schema = json.object().property('foo').additionalProperties(false);\n      test(schema, 'additionalProperties-false.json');\n    });\n\n    it('should match schema with single required property', () => {\n      const schema = json.property('foo', {}, true);\n      test(schema, 'single-required-property.json');\n    });\n\n    it('should also match schema with single required property', () => {\n      const schema = json.property('foo').required(true);\n      test(schema, 'single-required-property.json');\n    });\n\n    it('should match schema with single required property and no others allowed', () => {\n      const schema = json.property('foo').required('foo').additionalProperties(false);\n      test(schema, 'single-required-property-additionalProperties-false.json');\n    });\n\n    it('should match schema with multiple properties', () => {\n      const schema = json\n          .property('foo', json.string(), true)\n          .property('bar', json.integer());\n\n      test(schema, 'multiple-properties.json');\n    });\n\n  });\n\n});\n\n"],"sourceRoot":"/Users/bardiakhosravi/Projects/json-schema-builder/src"}