{"version":3,"sources":["lib/Items.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;6BAAyB,gBAAgB;;;;sBACtB,UAAU;;;;IAER,KAAK;YAAL,KAAK;;AACb,WADQ,KAAK,CACZ,KAAK,EAAE;0BADA,KAAK;;AAEtB,+BAFiB,KAAK,6CAEd;AACR,QAAI,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;GACnF;;eAJkB,KAAK;;WA2BpB,cAAC,OAAO,EAAE;;;AACZ,aAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,UAAI,IAAI,CAAC,KAAK,EAAE;;AACd,cAAI,KAAK,YAAA,CAAC;;AAEV,cAAI,MAAK,KAAK,+BAAkB,EAAE;AAChC,iBAAK,GAAG,MAAK,KAAK,CAAC,IAAI,EAAE,CAAC;WAC3B,MAAM;AACL,iBAAK,GAAG,EAAE,CAAC;;AAEX,kBAAK,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AACzB,mBAAK,CAAC,IAAI,CAAC,IAAI,+BAAkB,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;aACzD,CAAC,CAAC;WACJ;;AAED,iBAAO,CAAC,KAAK,GAAG,KAAK,CAAC;;OACvB;;AAED,aAAO,OAAO,CAAC;KAChB;;;SAzCQ,eAAG;AACV,aAAO,IAAI,CAAC,MAAM,CAAC;KACpB;SAEQ,aAAC,KAAK,EAAE;AACf,UAAI,KAAK,+BAAkB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACnD,YAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACxB,eAAK,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AACjB,gBAAI,EAAE,CAAC,gCAAkB,AAAC,EAAE;AAC1B,oBAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;aAC1D;WACF,CAAC,CAAC;SACJ;;AAED,YAAI,CAAC,MAAM,GAAG,KAAK,CAAC;OAErB,MAAM;AACL,cAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;OAChE;KACF;;;SAzBkB,KAAK;;;qBAAL,KAAK","file":"lib/Items.js","sourcesContent":["import ArrayKeyword from './ArrayKeyword';\nimport Schema from './Schema';\n\nexport default class Items extends ArrayKeyword {\n  constructor(value) {\n    super();\n    this.value = arguments.length > 1 ? Array.prototype.slice.call(arguments) : value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    if (value instanceof Schema || Array.isArray(value)) {\n      if (Array.isArray(value)) {\n        value.forEach(v => {\n          if (!(v instanceof Schema)) {\n            throw new Error('array values must be Schema instances');\n          }\n        });\n      }\n\n      this._value = value;\n\n    } else {\n      throw new Error('value must be an array or a Schema instance');\n    }\n  }\n\n  json(context) {\n    context = context || {};\n\n    if (this.value) {\n      let props;\n\n      if (this.value instanceof Schema) {\n        props = this.value.json();\n      } else {\n        props = [];\n\n        this.value.forEach(elem => {\n          props.push(elem instanceof Schema ? elem.json() : elem);\n        });\n      }\n\n      context.items = props;\n    }\n\n    return context;\n  }\n}"],"sourceRoot":"/Users/bardiakhosravi/Projects/json-schema-builder/src"}